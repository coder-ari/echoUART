
echoUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000480  08000480  00001480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000484  08000484  0000148c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000484  08000484  0000148c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000484  0800048c  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800048c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800048c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000255  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ac  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  000018c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010e9  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009bb  00000000  00000000  00002a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000439a  00000000  00000000  00003452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000077ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000138  00000000  00000000  00007830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00007968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000468 	.word	0x08000468

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000468 	.word	0x08000468

080001d4 <TIM2_IRQHandler>:
#include "stm32f401.h"
#include "uart.h"

void TIM2_IRQHandler(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    if (TIM2_SR & 0x01) {
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <TIM2_IRQHandler+0x34>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d00e      	beq.n	8000202 <TIM2_IRQHandler+0x2e>
        TIM2_SR &= ~0x01;           // Clear update interrupt flag
 80001e4:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <TIM2_IRQHandler+0x34>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <TIM2_IRQHandler+0x34>)
 80001ea:	f023 0301 	bic.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
        GPIOC_ODR ^= (1 << 13);     // Toggle PC13;
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <TIM2_IRQHandler+0x38>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a05      	ldr	r2, [pc, #20]	@ (800020c <TIM2_IRQHandler+0x38>)
 80001f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80001fa:	6013      	str	r3, [r2, #0]
        uart_send_string("hi");
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <TIM2_IRQHandler+0x3c>)
 80001fe:	f000 f8cf 	bl	80003a0 <uart_send_string>
    }
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40000010 	.word	0x40000010
 800020c:	40020814 	.word	0x40020814
 8000210:	08000480 	.word	0x08000480

08000214 <gpio_init>:

void gpio_init(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    RCC_AHB1ENR |= (1 << 2);        // Enable GPIOC clock
 8000218:	4b0b      	ldr	r3, [pc, #44]	@ (8000248 <gpio_init+0x34>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a0a      	ldr	r2, [pc, #40]	@ (8000248 <gpio_init+0x34>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6013      	str	r3, [r2, #0]
    GPIOC_MODER &= ~(0x3 << (13 * 2)); // Clear PC13 mode bits
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <gpio_init+0x38>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a08      	ldr	r2, [pc, #32]	@ (800024c <gpio_init+0x38>)
 800022a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800022e:	6013      	str	r3, [r2, #0]
    GPIOC_MODER |= (0x1 << (13 * 2));  // Set PC13 to output
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <gpio_init+0x38>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a05      	ldr	r2, [pc, #20]	@ (800024c <gpio_init+0x38>)
 8000236:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800023a:	6013      	str	r3, [r2, #0]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40023830 	.word	0x40023830
 800024c:	40020800 	.word	0x40020800

08000250 <tim2_init>:

void tim2_init(void) {
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
    RCC_APB1ENR |= (1 << 0);        // Enable TIM2 clock
 8000254:	4b13      	ldr	r3, [pc, #76]	@ (80002a4 <tim2_init+0x54>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a12      	ldr	r2, [pc, #72]	@ (80002a4 <tim2_init+0x54>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6013      	str	r3, [r2, #0]
    TIM2_PSC = 16000 - 1;           // Prescaler: 16MHz / 16000 = 1kHz
 8000260:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <tim2_init+0x58>)
 8000262:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000266:	601a      	str	r2, [r3, #0]
    TIM2_ARR = 500 - 1;             // 500ms interval (500 counts at 1kHz)
 8000268:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <tim2_init+0x5c>)
 800026a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800026e:	601a      	str	r2, [r3, #0]
    TIM2_DIER |= 0x01;              // Enable update interrupt
 8000270:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <tim2_init+0x60>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a0e      	ldr	r2, [pc, #56]	@ (80002b0 <tim2_init+0x60>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]
    TIM2_CR1 |= 0x01;               // Enable counter
 800027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
    NVIC_ISER0 |= (1 << TIM2_IRQ_NUMBER); // Enable TIM2 IRQ
 800028c:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <tim2_init+0x64>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a08      	ldr	r2, [pc, #32]	@ (80002b4 <tim2_init+0x64>)
 8000292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40023840 	.word	0x40023840
 80002a8:	40000028 	.word	0x40000028
 80002ac:	4000002c 	.word	0x4000002c
 80002b0:	4000000c 	.word	0x4000000c
 80002b4:	e000e100 	.word	0xe000e100

080002b8 <main>:

int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
    gpio_init();
 80002bc:	f7ff ffaa 	bl	8000214 <gpio_init>
    uart_init();
 80002c0:	f000 f804 	bl	80002cc <uart_init>
    tim2_init();
 80002c4:	f7ff ffc4 	bl	8000250 <tim2_init>

    while (1) {
 80002c8:	bf00      	nop
 80002ca:	e7fd      	b.n	80002c8 <main+0x10>

080002cc <uart_init>:
#include "stm32f401.h"


void uart_init(void) {
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
    // 1. Enable GPIOA clock
    RCC_AHB1ENR |= (1 << 0);   // GPIOAEN
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <uart_init+0x84>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000350 <uart_init+0x84>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6013      	str	r3, [r2, #0]

    // 2. Set PA9 (TX) and PA10 (RX) to Alternate Function mode (AF7)
    GPIOA_MODER &= ~((0x3 << (9 * 2)) | (0x3 << (10 * 2))); // Clear mode bits
 80002de:	4b1d      	ldr	r3, [pc, #116]	@ (8000354 <uart_init+0x88>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <uart_init+0x88>)
 80002e4:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80002e8:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  ((0x2 << (9 * 2)) | (0x2 << (10 * 2))); // AF mode = 10
 80002ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <uart_init+0x88>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a19      	ldr	r2, [pc, #100]	@ (8000354 <uart_init+0x88>)
 80002f0:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80002f4:	6013      	str	r3, [r2, #0]

    // 3. Set AF7 (USART1) on PA9 and PA10
    GPIOA_AFRH &= ~((0xF << ((9 - 8) * 4)) | (0xF << ((10 - 8) * 4)));
 80002f6:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <uart_init+0x8c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <uart_init+0x8c>)
 80002fc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000300:	6013      	str	r3, [r2, #0]
    GPIOA_AFRH |=  ((0x7 << ((9 - 8) * 4)) | (0x7 << ((10 - 8) * 4)));
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <uart_init+0x8c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a14      	ldr	r2, [pc, #80]	@ (8000358 <uart_init+0x8c>)
 8000308:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800030c:	6013      	str	r3, [r2, #0]

    // 4. No pull-up, no pull-down for PA9 and PA10 (optional)
    GPIOA_PUPDR &= ~((0x3 << (9 * 2)) | (0x3 << (10 * 2)));
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <uart_init+0x90>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <uart_init+0x90>)
 8000314:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8000318:	6013      	str	r3, [r2, #0]

    // 5. Enable USART1 clock (APB2ENR bit 4)
    RCC_APB2ENR |= (1 << 4);
 800031a:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <uart_init+0x94>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a10      	ldr	r2, [pc, #64]	@ (8000360 <uart_init+0x94>)
 8000320:	f043 0310 	orr.w	r3, r3, #16
 8000324:	6013      	str	r3, [r2, #0]

    // 6. Configure USART1 baud rate using mantissa and fraction

    uint32_t mantissa = 0x8;
 8000326:	2308      	movs	r3, #8
 8000328:	607b      	str	r3, [r7, #4]
    uint32_t fraction = 0xB;
 800032a:	230b      	movs	r3, #11
 800032c:	603b      	str	r3, [r7, #0]
    USART1_BRR = (mantissa << 4) | fraction;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	011a      	lsls	r2, r3, #4
 8000332:	490c      	ldr	r1, [pc, #48]	@ (8000364 <uart_init+0x98>)
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	4313      	orrs	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

    // 7. Enable USART1, transmitter and receiver
    USART1_CR1 = (1 << 13) | (1 << 3) | (1 << 2); // UE, TE, RE
 800033a:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <uart_init+0x9c>)
 800033c:	f242 020c 	movw	r2, #8204	@ 0x200c
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023830 	.word	0x40023830
 8000354:	40020000 	.word	0x40020000
 8000358:	40020024 	.word	0x40020024
 800035c:	4002000c 	.word	0x4002000c
 8000360:	40023844 	.word	0x40023844
 8000364:	40011008 	.word	0x40011008
 8000368:	4001100c 	.word	0x4001100c

0800036c <uart_send_char>:


void uart_send_char(char c) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
    while (!(USART1_SR & (1 << 7)));  // Wait until TXE is set (data register empty)
 8000376:	bf00      	nop
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <uart_send_char+0x2c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f9      	beq.n	8000378 <uart_send_char+0xc>
    USART1_DR = (uint8_t)c;            // Write only 8 bits
 8000384:	4a05      	ldr	r2, [pc, #20]	@ (800039c <uart_send_char+0x30>)
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	6013      	str	r3, [r2, #0]
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40011000 	.word	0x40011000
 800039c:	40011004 	.word	0x40011004

080003a0 <uart_send_string>:

void uart_send_string(const char *str) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80003a8:	e006      	b.n	80003b8 <uart_send_string+0x18>
        uart_send_char(*str++);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	1c5a      	adds	r2, r3, #1
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ffda 	bl	800036c <uart_send_char>
    while (*str) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d1f4      	bne.n	80003aa <uart_send_string+0xa>
    }
}
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003cc:	480d      	ldr	r0, [pc, #52]	@ (8000404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	@ (8000408 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	@ (800040c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000410 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000418 <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fa:	f000 f811 	bl	8000420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fe:	f7ff ff5b 	bl	80002b8 <main>

08000402 <LoopForever>:

LoopForever:
  b LoopForever
 8000402:	e7fe      	b.n	8000402 <LoopForever>
  ldr   r0, =_estack
 8000404:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000410:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 8000414:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000418:	2000001c 	.word	0x2000001c

0800041c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC_IRQHandler>
	...

08000420 <__libc_init_array>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	4d0d      	ldr	r5, [pc, #52]	@ (8000458 <__libc_init_array+0x38>)
 8000424:	4c0d      	ldr	r4, [pc, #52]	@ (800045c <__libc_init_array+0x3c>)
 8000426:	1b64      	subs	r4, r4, r5
 8000428:	10a4      	asrs	r4, r4, #2
 800042a:	2600      	movs	r6, #0
 800042c:	42a6      	cmp	r6, r4
 800042e:	d109      	bne.n	8000444 <__libc_init_array+0x24>
 8000430:	4d0b      	ldr	r5, [pc, #44]	@ (8000460 <__libc_init_array+0x40>)
 8000432:	4c0c      	ldr	r4, [pc, #48]	@ (8000464 <__libc_init_array+0x44>)
 8000434:	f000 f818 	bl	8000468 <_init>
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	2600      	movs	r6, #0
 800043e:	42a6      	cmp	r6, r4
 8000440:	d105      	bne.n	800044e <__libc_init_array+0x2e>
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f855 3b04 	ldr.w	r3, [r5], #4
 8000448:	4798      	blx	r3
 800044a:	3601      	adds	r6, #1
 800044c:	e7ee      	b.n	800042c <__libc_init_array+0xc>
 800044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000452:	4798      	blx	r3
 8000454:	3601      	adds	r6, #1
 8000456:	e7f2      	b.n	800043e <__libc_init_array+0x1e>
 8000458:	08000484 	.word	0x08000484
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000488 	.word	0x08000488

08000468 <_init>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr

08000474 <_fini>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr
